// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniUdemyWebAPI.Data;

#nullable disable

namespace MiniUdemyWebAPI.Migrations
{
    [DbContext(typeof(MiniUdemyDBContext))]
    [Migration("20250415175134_added some course category")]
    partial class addedsomecoursecategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CourseCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CourseCategories");

                    b.HasData(
                        new
                        {
                            CourseCategoryId = 1,
                            CategoryName = "Programming"
                        },
                        new
                        {
                            CourseCategoryId = 2,
                            CategoryName = "Data Science"
                        },
                        new
                        {
                            CourseCategoryId = 3,
                            CategoryName = "Web Development"
                        },
                        new
                        {
                            CourseCategoryId = 4,
                            CategoryName = "Mobile Development"
                        },
                        new
                        {
                            CourseCategoryId = 5,
                            CategoryName = "Game Development"
                        },
                        new
                        {
                            CourseCategoryId = 6,
                            CategoryName = "Cloud Computing"
                        },
                        new
                        {
                            CourseCategoryId = 7,
                            CategoryName = "Cyber Security"
                        },
                        new
                        {
                            CourseCategoryId = 8,
                            CategoryName = "Artificial Intelligence"
                        },
                        new
                        {
                            CourseCategoryId = 9,
                            CategoryName = "Machine Learning"
                        },
                        new
                        {
                            CourseCategoryId = 10,
                            CategoryName = "Blockchain"
                        },
                        new
                        {
                            CourseCategoryId = 11,
                            CategoryName = "Data Analysis"
                        },
                        new
                        {
                            CourseCategoryId = 12,
                            CategoryName = "Digital Marketing"
                        },
                        new
                        {
                            CourseCategoryId = 13,
                            CategoryName = "Graphic Design"
                        },
                        new
                        {
                            CourseCategoryId = 14,
                            CategoryName = "UI/UX Design"
                        },
                        new
                        {
                            CourseCategoryId = 15,
                            CategoryName = "Web Design",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            CourseCategoryId = 16,
                            CategoryName = "Web Development",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            CourseCategoryId = 17,
                            CategoryName = "Mobile App Development",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            CourseCategoryId = 18,
                            CategoryName = "Game Design",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            CourseCategoryId = 19,
                            CategoryName = "Game Development",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            CourseCategoryId = 20,
                            CategoryName = "Cloud Security",
                            ParentCategoryId = 7
                        },
                        new
                        {
                            CourseCategoryId = 21,
                            CategoryName = "Cloud Development",
                            ParentCategoryId = 6
                        },
                        new
                        {
                            CourseCategoryId = 22,
                            CategoryName = "Data Visualization",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            CourseCategoryId = 23,
                            CategoryName = "Data Engineering",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CourseCategoryId = 24,
                            CategoryName = "Java",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 25,
                            CategoryName = "C#",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 26,
                            CategoryName = "C++",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 27,
                            CategoryName = "JavaScript",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 28,
                            CategoryName = "Python",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 29,
                            CategoryName = "PHP",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 30,
                            CategoryName = "Ruby",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 31,
                            CategoryName = "Swift",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 32,
                            CategoryName = "Kotlin",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 33,
                            CategoryName = ".NET",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 34,
                            CategoryName = "ASP.NET",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 35,
                            CategoryName = "Django",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 36,
                            CategoryName = "Flask",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 37,
                            CategoryName = "Node.js",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 38,
                            CategoryName = "React.js",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 39,
                            CategoryName = "Angular",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CourseCategoryId = 40,
                            CategoryName = "Vue.js",
                            ParentCategoryId = 1
                        });
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            LanguageName = "English"
                        },
                        new
                        {
                            LanguageId = 2,
                            LanguageName = "Hindi"
                        },
                        new
                        {
                            LanguageId = 3,
                            LanguageName = "Portuguese"
                        });
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.EnrollmentModels.Enrollments", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.RatingModels.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("Starts")
                        .HasColumnType("real");

                    b.HasKey("RatingId");

                    b.HasIndex("EnrollmentId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Instructor"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.UserRoles", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LinkedInLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileAddr", b =>
                {
                    b.Property<int>("UserProfileAddrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileAddrId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileAddrId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("UserProfileAddrs");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileImg", b =>
                {
                    b.Property<int>("UserProfileImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProfileImgId"));

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UserProfileImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileImgId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("UserProfileImgs");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.Course", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.CourseModels.CourseCategory", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniUdemyWebAPI.Models.CourseModels.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.CourseCategory", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.CourseModels.CourseCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.EnrollmentModels.Enrollments", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.CourseModels.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniUdemyWebAPI.Models.UserModels.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.RatingModels.Rating", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.EnrollmentModels.Enrollments", "Enrollment")
                        .WithOne("Rating")
                        .HasForeignKey("MiniUdemyWebAPI.Models.RatingModels.Rating", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.UserRoles", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.UserModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniUdemyWebAPI.Models.UserModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.UserModels.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileAddr", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", "UserProfile")
                        .WithOne("UserProfileAddr")
                        .HasForeignKey("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileAddr", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileImg", b =>
                {
                    b.HasOne("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", "UserProfile")
                        .WithOne("UserProfileImg")
                        .HasForeignKey("MiniUdemyWebAPI.Models.UserProfileModels.UserProfileImg", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.CourseModels.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.EnrollmentModels.Enrollments", b =>
                {
                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserModels.User", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MiniUdemyWebAPI.Models.UserProfileModels.UserProfile", b =>
                {
                    b.Navigation("UserProfileAddr")
                        .IsRequired();

                    b.Navigation("UserProfileImg")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
